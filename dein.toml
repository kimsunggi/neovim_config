[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'morhetz/gruvbox'
hook_add = '''
  let g:gruvbox_contrast_dark = 'hard'
'''

[[plugins]]
repo='hoob3rt/lualine.nvim'

[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_add = '''
  nmap <leader>gs <cmd>Gina status<cr>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_map_keys = 0
  nmap ]c <Plug>(GitGutterNextHunk)
  nmap [c <Plug>(GitGutterPrevHunk)
'''

[[plugins]]
repo = 'lambdalisue/fern.vim'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = 0
hook_add = '''
  let g:coc_global_extensions = [
    \'@yaegassy/coc-volar',
    \'coc-css',
    \'coc-docker',
    \'coc-eslint',
    \'coc-git',
    \'coc-html',
    \'coc-json',
    \'coc-lua',
    \'coc-markdownlint',
    \'coc-phpls',
    \'coc-prettier',
    \'coc-sql',
    \'coc-sumneko-lua',
    \'coc-toml',
    \'coc-tsserver',
    \'coc-vimlsp',
    \'coc-jedi',
    \'coc-diagnostic',
  \]
  inoremap <silent><expr> <c-space> coc#refresh()
  inoremap <silent><expr> <tab> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> <C-w>gd <cmd>vs<cr><Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gF <Plug>(coc-references)
  nmap <f2> <Plug>(coc-rename)
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)
  nmap <esc><esc> <cmd>call coc#float#close_all()<cr>
  " Find symbol of current document.
  nnoremap <silent><nowait> <leader>o  :<C-u>CocList outline<cr>
  " Search workspace symbols.
  nnoremap <silent><nowait> <leader>s  :<C-u>CocList -I symbols<cr>
  nnoremap <silent> gh :call <SID>show_documentation()<CR>
  nnoremap <silent> <leader>a <cmd>CocAction<cr>
  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction
  " higlight when hover cursor
  autocmd CursorHold * silent call CocActionAsync('highlight')
'''
